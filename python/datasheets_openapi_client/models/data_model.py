# coding: utf-8

"""
    Datasheets Backend

    This is Datasheet backend API documentation. This is intended only for development purposes

    The version of the OpenAPI document: 1.0.1
    Contact: kari.kolehmainen@vtt.fi
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from datasheets_openapi_client.models.data_models import DataModels
from datasheets_openapi_client.models.datamodel_links import DatamodelLinks

class DataModel(BaseModel):
    """
    DataModel
    """
    datamodel_links: DatamodelLinks = Field(...)
    input: DataModels = Field(...)
    output: DataModels = Field(...)
    __properties = ["datamodel_links", "input", "output"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataModel:
        """Create an instance of DataModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of datamodel_links
        if self.datamodel_links:
            _dict['datamodel_links'] = self.datamodel_links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataModel:
        """Create an instance of DataModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataModel.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DataModel) in the input: " + obj)

        _obj = DataModel.parse_obj({
            "datamodel_links": DatamodelLinks.from_dict(obj.get("datamodel_links")) if obj.get("datamodel_links") is not None else None,
            "input": DataModels.from_dict(obj.get("input")) if obj.get("input") is not None else None,
            "output": DataModels.from_dict(obj.get("output")) if obj.get("output") is not None else None
        })
        return _obj


