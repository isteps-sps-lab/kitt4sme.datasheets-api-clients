# coding: utf-8

"""
    Datasheets Backend

    This is Datasheet backend API documentation. This is intended only for development purposes

    The version of the OpenAPI document: 1.0.1
    Contact: kari.kolehmainen@vtt.fi
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from datasheets_openapi_client.models.context import Context
from datasheets_openapi_client.models.data_model import DataModel
from datasheets_openapi_client.models.hardware_dependency import HardwareDependency
from datasheets_openapi_client.models.information import Information
from datasheets_openapi_client.models.module_properties import ModuleProperties
from datasheets_openapi_client.models.public_endpoints import PublicEndpoints
from datasheets_openapi_client.models.skills import Skills
from datasheets_openapi_client.models.software_dependency import SoftwareDependency
from datasheets_openapi_client.models.support import Support
from datasheets_openapi_client.models.technical_requirements import TechnicalRequirements

class Datasheet(BaseModel):
    """
    Datasheet
    """
    context: Context = Field(...)
    datamodel: DataModel = Field(...)
    information: Information = Field(...)
    keycloak_id: StrictStr = Field(...)
    module_properties: ModuleProperties = Field(...)
    public_endpoints: PublicEndpoints = Field(...)
    skills: Skills = Field(...)
    support: Support = Field(...)
    technicalrequirements: TechnicalRequirements = Field(...)
    datasheet_id: Optional[StrictInt] = None
    hardware_dependencies: Optional[conlist(HardwareDependency)] = None
    software_dependencies: Optional[conlist(SoftwareDependency)] = None
    __properties = ["context", "datamodel", "information", "keycloak_id", "module_properties", "public_endpoints", "skills", "support", "technicalrequirements", "datasheet_id", "hardware_dependencies", "software_dependencies"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Datasheet:
        """Create an instance of Datasheet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datamodel
        if self.datamodel:
            _dict['datamodel'] = self.datamodel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of information
        if self.information:
            _dict['information'] = self.information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of module_properties
        if self.module_properties:
            _dict['module_properties'] = self.module_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_endpoints
        if self.public_endpoints:
            _dict['public_endpoints'] = self.public_endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skills
        if self.skills:
            _dict['skills'] = self.skills.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support
        if self.support:
            _dict['support'] = self.support.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technicalrequirements
        if self.technicalrequirements:
            _dict['technicalrequirements'] = self.technicalrequirements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hardware_dependencies (list)
        _items = []
        if self.hardware_dependencies:
            for _item in self.hardware_dependencies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hardware_dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in software_dependencies (list)
        _items = []
        if self.software_dependencies:
            for _item in self.software_dependencies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['software_dependencies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Datasheet:
        """Create an instance of Datasheet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Datasheet.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Datasheet) in the input: " + obj)

        _obj = Datasheet.parse_obj({
            "context": Context.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "datamodel": DataModel.from_dict(obj.get("datamodel")) if obj.get("datamodel") is not None else None,
            "information": Information.from_dict(obj.get("information")) if obj.get("information") is not None else None,
            "keycloak_id": obj.get("keycloak_id"),
            "module_properties": ModuleProperties.from_dict(obj.get("module_properties")) if obj.get("module_properties") is not None else None,
            "public_endpoints": PublicEndpoints.from_dict(obj.get("public_endpoints")) if obj.get("public_endpoints") is not None else None,
            "skills": Skills.from_dict(obj.get("skills")) if obj.get("skills") is not None else None,
            "support": Support.from_dict(obj.get("support")) if obj.get("support") is not None else None,
            "technicalrequirements": TechnicalRequirements.from_dict(obj.get("technicalrequirements")) if obj.get("technicalrequirements") is not None else None,
            "datasheet_id": obj.get("datasheet_id"),
            "hardware_dependencies": [HardwareDependency.from_dict(_item) for _item in obj.get("hardware_dependencies")] if obj.get("hardware_dependencies") is not None else None,
            "software_dependencies": [SoftwareDependency.from_dict(_item) for _item in obj.get("software_dependencies")] if obj.get("software_dependencies") is not None else None
        })
        return _obj


