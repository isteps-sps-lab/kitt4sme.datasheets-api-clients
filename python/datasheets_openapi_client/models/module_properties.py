# coding: utf-8

"""
    Datasheets Backend

    This is Datasheet backend API documentation. This is intended only for development purposes

    The version of the OpenAPI document: 1.0.1
    Contact: kari.kolehmainen@vtt.fi
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from datasheets_openapi_client.models.module_property import ModuleProperty

class ModuleProperties(BaseModel):
    """
    ModuleProperties
    """
    management: Optional[conlist(ModuleProperty)] = None
    quality: Optional[conlist(ModuleProperty)] = None
    operator: Optional[conlist(ModuleProperty)] = None
    performance: Optional[conlist(ModuleProperty)] = None
    __properties = ["management", "quality", "operator", "performance"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModuleProperties:
        """Create an instance of ModuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in management (list)
        _items = []
        if self.management:
            for _item in self.management:
                if _item:
                    _items.append(_item.to_dict())
            _dict['management'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quality (list)
        _items = []
        if self.quality:
            for _item in self.quality:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quality'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in operator (list)
        _items = []
        if self.operator:
            for _item in self.operator:
                if _item:
                    _items.append(_item.to_dict())
            _dict['operator'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in performance (list)
        _items = []
        if self.performance:
            for _item in self.performance:
                if _item:
                    _items.append(_item.to_dict())
            _dict['performance'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModuleProperties:
        """Create an instance of ModuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModuleProperties.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ModuleProperties) in the input: " + obj)

        _obj = ModuleProperties.parse_obj({
            "management": [ModuleProperty.from_dict(_item) for _item in obj.get("management")] if obj.get("management") is not None else None,
            "quality": [ModuleProperty.from_dict(_item) for _item in obj.get("quality")] if obj.get("quality") is not None else None,
            "operator": [ModuleProperty.from_dict(_item) for _item in obj.get("operator")] if obj.get("operator") is not None else None,
            "performance": [ModuleProperty.from_dict(_item) for _item in obj.get("performance")] if obj.get("performance") is not None else None
        })
        return _obj


