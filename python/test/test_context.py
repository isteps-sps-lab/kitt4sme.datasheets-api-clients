# coding: utf-8

"""
    Datasheets Backend

    This is Datasheet backend API documentation. This is intended only for development purposes

    The version of the OpenAPI document: 1.0.1
    Contact: kari.kolehmainen@vtt.fi
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from datasheets_openapi_client.models.context import Context  # noqa: E501

class TestContext(unittest.TestCase):
    """Context unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Context:
        """Test Context
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Context`
        """
        model = Context()  # noqa: E501
        if include_optional:
            return Context(
                benefits = datasheets_openapi_client.models.benefits.Benefits(
                    macmuhine = datasheets_openapi_client.models.benefit2_fields.Benefit2Fields(
                        1 = True, 
                        2 = True, ), 
                    operator = datasheets_openapi_client.models.benefit3_fields.Benefit3Fields(
                        1 = True, 
                        2 = True, 
                        3 = True, ), 
                    production = datasheets_openapi_client.models.benefit2_fields.Benefit2Fields(
                        1 = True, 
                        2 = True, ), 
                    quality = , 
                    machine = , ),
                category = datasheets_openapi_client.models.category.Category(
                    decisionmaker = True, 
                    reasoning = True, ),
                features = datasheets_openapi_client.models.features.Features(
                    operator = [
                        ''
                        ], 
                    management = [
                        ''
                        ], 
                    performance = [
                        ''
                        ], 
                    quality = [
                        ''
                        ], ),
                productiveaxis = datasheets_openapi_client.models.productiveaxis.Productiveaxis(
                    ai_hri = True, 
                    ai_manualactivity = True, 
                    ai_quality = True, ),
                usecase = datasheets_openapi_client.models.usecase.Usecase(
                    usecasedesc = '', ),
                description = '',
                industry = [
                    ''
                    ]
            )
        else:
            return Context(
                benefits = datasheets_openapi_client.models.benefits.Benefits(
                    macmuhine = datasheets_openapi_client.models.benefit2_fields.Benefit2Fields(
                        1 = True, 
                        2 = True, ), 
                    operator = datasheets_openapi_client.models.benefit3_fields.Benefit3Fields(
                        1 = True, 
                        2 = True, 
                        3 = True, ), 
                    production = datasheets_openapi_client.models.benefit2_fields.Benefit2Fields(
                        1 = True, 
                        2 = True, ), 
                    quality = , 
                    machine = , ),
                category = datasheets_openapi_client.models.category.Category(
                    decisionmaker = True, 
                    reasoning = True, ),
                features = datasheets_openapi_client.models.features.Features(
                    operator = [
                        ''
                        ], 
                    management = [
                        ''
                        ], 
                    performance = [
                        ''
                        ], 
                    quality = [
                        ''
                        ], ),
                productiveaxis = datasheets_openapi_client.models.productiveaxis.Productiveaxis(
                    ai_hri = True, 
                    ai_manualactivity = True, 
                    ai_quality = True, ),
                usecase = datasheets_openapi_client.models.usecase.Usecase(
                    usecasedesc = '', ),
        )
        """

    def testContext(self):
        """Test Context"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
